// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjetSessionBackend.Core.Models.Entities;

#nullable disable

namespace ProjetSessionBackend.Core.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "project", "order_status", new[] { "OPEN", "PREPARING", "PICK-UP", "SHIPPED", "PAYED", "ARCHIVED" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "project", "payment_method", new[] { "CASH", "DEBIT", "CREDIT" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "project", "user_type", new[] { "EMPLOYEE", "MANAGER", "ADMIN", "PRESIDENT" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MenuMenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.HasKey("MenuItemId", "MenuId")
                        .HasName("pk_menu_menu_item");

                    b.HasIndex("MenuId");

                    b.ToTable("menu_menu_item", "project");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .HasColumnType("character varying")
                        .HasColumnName("address");

                    b.Property<string>("CardName")
                        .HasColumnType("character varying")
                        .HasColumnName("card_name");

                    b.Property<string>("CardNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("card_number");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Cvv")
                        .HasColumnType("character varying")
                        .HasColumnName("cvv");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("character varying")
                        .HasColumnName("expiry_date");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ClientId")
                        .HasName("pk_client_id");

                    b.HasIndex(new[] { "PersonId" }, "client_person_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "client_user_id_key")
                        .IsUnique();

                    b.ToTable("client", "project");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("menu_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("MenuId")
                        .HasName("pk_menu_id");

                    b.ToTable("menu", "project");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("menu_item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuItemId"));

                    b.Property<bool?>("Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("available")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("MenuItemId")
                        .HasName("pk_meal_id");

                    b.ToTable("menu_item", "project");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("Subtotal")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(20, 2)
                        .HasColumnType("numeric(20,2)")
                        .HasColumnName("subtotal")
                        .HasDefaultValueSql("0.0");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(20, 2)
                        .HasColumnType("numeric(20,2)")
                        .HasColumnName("total")
                        .HasDefaultValueSql("0.0");

                    b.Property<decimal?>("TpsValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasColumnName("tps_value")
                        .HasDefaultValueSql("5");

                    b.Property<decimal?>("TvqValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasColumnName("tvq_value")
                        .HasDefaultValueSql("9.975");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("OrderId")
                        .HasName("pk_order_id");

                    b.HasIndex(new[] { "ClientId" }, "order_client_id_key")
                        .IsUnique();

                    b.ToTable("order", "project");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("PersonId")
                        .HasName("pk_person_id");

                    b.ToTable("person", "project");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("restaurant_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RestaurantId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("address");

                    b.Property<int?>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("RestaurantId")
                        .HasName("pk_restaurant_id");

                    b.HasIndex(new[] { "MenuId" }, "restaurant_menu_id_key")
                        .IsUnique();

                    b.ToTable("restaurant", "project");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("pk_role_id");

                    b.ToTable("role", "project");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("character varying")
                        .HasColumnName("password_salt");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId")
                        .HasName("pk_user_id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "PersonId" }, "user_person_id_key")
                        .IsUnique();

                    b.ToTable("user", "project");
                });

            modelBuilder.Entity("MenuMenuItem", b =>
                {
                    b.HasOne("ProjetSessionBackend.Core.Models.Entities.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("fk_menu_menu_item_menu");

                    b.HasOne("ProjetSessionBackend.Core.Models.Entities.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .IsRequired()
                        .HasConstraintName("fk_menu_menu_item_menu_item");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Client", b =>
                {
                    b.HasOne("ProjetSessionBackend.Core.Models.Entities.Person", "Person")
                        .WithOne("Client")
                        .HasForeignKey("ProjetSessionBackend.Core.Models.Entities.Client", "PersonId")
                        .HasConstraintName("fk_client_person_id");

                    b.HasOne("ProjetSessionBackend.Core.Models.Entities.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("ProjetSessionBackend.Core.Models.Entities.Client", "UserId")
                        .HasConstraintName("fk_client_user_id");

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Order", b =>
                {
                    b.HasOne("ProjetSessionBackend.Core.Models.Entities.Client", "Client")
                        .WithOne("Order")
                        .HasForeignKey("ProjetSessionBackend.Core.Models.Entities.Order", "ClientId")
                        .HasConstraintName("fk_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Restaurant", b =>
                {
                    b.HasOne("ProjetSessionBackend.Core.Models.Entities.Menu", "Menu")
                        .WithOne("Restaurant")
                        .HasForeignKey("ProjetSessionBackend.Core.Models.Entities.Restaurant", "MenuId")
                        .HasConstraintName("fk_menu_id");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.User", b =>
                {
                    b.HasOne("ProjetSessionBackend.Core.Models.Entities.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("ProjetSessionBackend.Core.Models.Entities.User", "PersonId")
                        .HasConstraintName("fk_user_person_id");

                    b.HasOne("ProjetSessionBackend.Core.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_role_id");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Client", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Menu", b =>
                {
                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Person", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjetSessionBackend.Core.Models.Entities.User", b =>
                {
                    b.Navigation("Client");
                });
#pragma warning restore 612, 618
        }
    }
}
